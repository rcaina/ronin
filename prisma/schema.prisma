// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id           String        @id @default(cuid())
    name         String
    users        AccountUser[]
    budgets      Budget[]
    deleted      DateTime?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    incomes      Income[]
    transactions Transaction[]

    @@index([id])
    @@index([name])
    @@index([deleted])
    @@map("accounts")
}

model AccountUser {
    id        String  @id @default(cuid())
    accountId String
    userId    String
    account   Account @relation(fields: [accountId], references: [id])
    user      User    @relation(fields: [userId], references: [id])

    @@index([accountId])
}

model User {
    id            String        @id @default(cuid())
    name          String
    firstName     String
    lastName      String
    email         String?       @unique
    password      String?
    emailVerified DateTime?
    role          Role?
    phone         String?
    image         String?
    cards         Card[]
    deleted       DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    sessions      Session[]
    accountUsers  AccountUser[]
    incomes       Income[]
    transactions  Transaction[]

    @@index([email])
    @@index([name])
    @@index([role])
    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model Budget {
    id           String           @id @default(cuid())
    name         String
    strategy     StrategyType
    period       PeriodType
    status       BudgetStatus     @default(ACTIVE)
    deleted      DateTime?
    startAt      DateTime
    endAt        DateTime
    isRecurring  Boolean          @default(false)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    accountId    String
    account      Account          @relation(fields: [accountId], references: [id])
    categories   BudgetCategory[]
    transactions Transaction[]
    incomes      Income[]

    @@index([id])
    @@index([name])
    @@index([strategy])
    @@index([period])
    @@index([status])
    @@index([deleted])
    @@map("budgets")
}

model Income {
    id          String     @id @default(cuid())
    amount      Float
    source      String?
    description String?
    isPlanned   Boolean    @default(false)
    frequency   PeriodType
    accountId   String
    account     Account    @relation(fields: [accountId], references: [id])
    userId      String
    user        User       @relation(fields: [userId], references: [id])
    budgetId    String
    budget      Budget     @relation(fields: [budgetId], references: [id])
    receivedAt  DateTime?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    deleted     DateTime?

    @@index([id])
}

model Category {
    id               String           @id @default(cuid())
    name             String
    group            CategoryType
    deleted          DateTime?
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    budgetCategories BudgetCategory[]

    @@index([id])
    @@index([name])
    @@index([deleted])
    @@map("categories")
}

model BudgetCategory {
    id              String        @id @default(cuid())
    budgetId        String
    budget          Budget        @relation(fields: [budgetId], references: [id])
    categoryId      String
    category        Category      @relation(fields: [categoryId], references: [id])
    allocatedAmount Float
    transactions    Transaction[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    deleted         DateTime?

    @@index([id])
    @@index([deleted])
}

model Card {
    id            String        @id @default(cuid())
    name          String
    cardType      CardType
    amountSpent   Float?
    spendingLimit Float?
    userId        String
    user          User          @relation(fields: [userId], references: [id])
    transactions  Transaction[]
    deleted       DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@index([id])
}

model Transaction {
    id                  String          @id @default(cuid())
    name                String?
    description         String?
    amount              Float
    occurredAt          DateTime?
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    deleted             DateTime?
    cardId              String?
    card                Card?           @relation(fields: [cardId], references: [id])
    budgetId            String
    Budget              Budget          @relation(fields: [budgetId], references: [id])
    categoryId          String?
    category            BudgetCategory? @relation(fields: [categoryId], references: [id])
    accountId           String
    account             Account         @relation(fields: [accountId], references: [id])
    userId              String
    user                User            @relation(fields: [userId], references: [id])
    transactionType     TransactionType @default(REGULAR)
    linkedTransactionId String?
    linkedTransaction   Transaction?    @relation("LinkedTransactions", fields: [linkedTransactionId], references: [id])
    linkedTransactions  Transaction[]   @relation("LinkedTransactions")

    @@index([id])
    @@index([name])
    @@index([amount])
    @@index([deleted])
    @@index([transactionType])
    @@map("transactions")
}

enum Role {
    ADMIN
    MEMBER
}

enum StrategyType {
    ZERO_SUM
    FIFTY_THIRTY_TWENTY
}

enum PeriodType {
    DAILY
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
    ONE_TIME
}

enum CardType {
    CASH
    DEBIT
    CREDIT
    BUSINESS_DEBIT
    BUSINESS_CREDIT
}

enum CategoryType {
    WANTS
    NEEDS
    INVESTMENT
}

enum TransactionType {
    REGULAR
    CARD_PAYMENT
}

enum BudgetStatus {
    ACTIVE
    COMPLETED
    ARCHIVED
}
